Nodejs

assert（断言）

child_process（子进程）

cluster（集群）

crypto（加密）

dns（域名服务器）

domain（域）--已经弃用

perf_hooks（性能钩子）

os（操作系统）

net（网络）

----------------------------------------------

1、多进程/多线程
	多进程--重：有独立的存储空间
		优点：安全、简单
		缺点：性能相对较低
	多线程--轻：同一个进程内的线程共享空间
		优点：性能高
		缺点：不安全、复杂
	
	
	------------------------
	JS：单进程、非阻塞（异步）
	前：webWorker多进程
	node：cluster模块--多进程{
		如果想穿件进程--分裂（fork）
		---------------------------
		只有系统，才能完全全新创造进程：
		1、通过复制自己创造子进程
		2、子进程不能再去创造了
		
		*一般主进程不干活，纯粹派生子进程；干活的是子进程*
		
		const cluster = require('cluster');
		const os=require('os');
		
		//主进程才能fork
		//isMaster:如果该进程是主进程，则为 true
		if(cluster.isMaster){
			// console.log(os.cpus().length)
			//根据内核创造子进程数量
			for(let i=0;i<os.cpus().length;i++){
				cluster.fork();
			}
			console.log('主进程');
		}else{
			console.log('子进程')
		}
	}
--------------------------------------------------------
	
2、框架（Koa、Express）	
Express	基于回调
Koa1.x		基于generator/yield
Koa2.x		过度(兼容1.x和3.x)；
Koa3.x		基于async/await	
	---------------------------------------------
	*Express中间件{
		1、静态文件访问static()
		
		--------next流水线模式--------
		1、express拆分处理步骤
		2、express使用get处理数据，req.query
		
		*crypto（加密）---pass-md5加密
			const md5=crypto.createHash('md5');
			md5.update(pass);
			pass=md5.digest('hex');
			
		---bodyParser--post数据中间件---
		const express = require('express')
		const bodyParser = require('body-parser')
		 
		let app = express()
		 
		// 将各种不同的定制JSON类型解析为JSON
		app.use(bodyParser.json({ type: 'application/*+json' }))
		 
		//把一些自定义的东西解析到缓冲区中
		app.use(bodyParser.raw({ type: 'application/vnd.custom-type' }))
		 
		//将HTML正文解析为字符串
		app.use(bodyParser.text({ type: 'text/html' }))	
		
		//创建应用程序/ x-www-form-urlencoded解析器
		var urlencodedParser = bodyParser.urlencoded({ extended: false })
		
		app.post('/login', urlencodedParser, function (req, res) {
		  res.send('welcome, ' + req.body.username)
		})
		
		*中间件是从上向下执行，顺序不能逆转
		
		---------------------------------------------------------------------
		*响应方式：
		res.send
		res.sendFile			控制读文件--相对路径需要和path模块一起用
		res.sendStatus(code,msg)	404
		res.redirect(url)		重定向
		
		*上传文件：multer中间件 npm i multer
		1
		var multer  = require('multer')
		2
		var upload = multer({ dest: 'uploads/' });
		3
		server.post('/profile', upload.any(), function (req, res, next) {
		  // req.files 
		})
		
		---------------------------------------------------------------------	
		
	}
	
----------------------------------------
cookie/session
1、cookie-浏览器存数据，在请求服务器时候，会被带到请求里面
	缺点：容量小（4kb），不安全（用户随意篡改）
2、session-只存在于服务器端
	有点：容量不限、安全（用户碰不到）
	
session基于cookie	
风险：如果sess_id泄露-session劫持
1、提醒用户不要在f12在console里面乱输入
2、sess_id做的复杂，做个有效期
	
*服务端用法：
cookie：{
	1、设置 res.cookie(name,value,options)
	2、读取	req.cookies
	*3、安全（防篡改）{
			---------------------------------------
			cookieParser初始化时，传入secret（参数）作为签名的秘钥。
			设置cookie时，将signed设置为true，表示对cookie进行签名。
			获取cookie时，可以同时通过req.cookies，也可以通过req.signedCookies获取。
			res.cookie('pass','123456'{
				//domain
				//expires:date	有效时间
				//maxAge:int
				//path
				//secure:true	只用于https
				//signed:true	
			})
			--------------------------------------	
		（1）不是所有cookie信息都敏感
		（2）签名会使得cookie体积增大
	}
}	
session：{
	1、设置	req.session
	2、读取	req.session.xx=xx
	*3、安全（防篡改）
		---------------------------
		session			sess_id
		session.sig		sess_id签名
		---------------------------
}	
----------fs模块------------------------
	*appendFile(path, data[, options], callback)*
	添加数据内容区别于writeFile直接替换内容
	fs.appendFile('文件.txt', '追加的数据', (err) => {
	  if (err) throw err;
	  console.log('数据已被追加到文件');
	});	
		
		
		